- Using parser combinators (see Functional Programming in Swift etc)

- It would be great to have a function error(format: "Unbound symbol '%@', name)
  to make a Value.Error rather than having to do error(message: String(format: "..."))
  [maybe see that blog post from apple about making an assert function]
	https://developer.apple.com/swift/blog/?id=15

- expectQExpression() helper functions
func expectQExpression(name: String, value: Value) -> [Value] {
  if case .QExpression(let qvalues) = value {
    return qvalues
  } else {
    return [.Error(message: "Function '\(name)' expects Q-Expression, got \(value)")]
  }
}

-	We alloc the new Environment for a lambda when we parse it. That seems an
	error. It would be more correct to create the Environment when we evaluate
	the lambda. Especially when doing recursion.
	-	However, passing an Environment around is necessary for partial
		application, because we need to know the values for some of its
		parameters. (The C version copies the environment when it returns
		the partially evaluated lambda.)
	-	Is this explained / dealt with in ch.13 - 16?
