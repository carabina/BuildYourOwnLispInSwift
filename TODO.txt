- Using parser combinators (see Functional Programming in Swift etc)

- It would be great to have a function error(format: "Unbound symbol '%@', name)
  to make a Value.Error rather than having to do error(message: String(format: "..."))
  [maybe see that blog post from apple about making an assert function]
	https://developer.apple.com/swift/blog/?id=15

- expectQExpression() helper functions
func expectQExpression(name: String, value: Value) -> [Value] {
  if case .QExpression(let qvalues) = value {
    return qvalues
  } else {
    return [.Error(message: "Function '\(name)' expects Q-Expression, got \(value)")]
  }
}
